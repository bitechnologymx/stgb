"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
require("rxjs/add/operator/map");
var http_utils_1 = require("../shared/utils/http-utils");
var cuentas_iterface_1 = require("../services/interfaces/cuentas.iterface");
var cuenta_movtos_interface_1 = require("../services/interfaces/cuenta-movtos.interface");
var respuesta_interface_1 = require("../services/interfaces/respuesta.interface");
var WsData = /** @class */ (function () {
    function WsData() {
    }
    return WsData;
}());
exports.WsData = WsData;
var CuentasService = /** @class */ (function () {
    function CuentasService(http) {
        this.http = http;
        this.baseUrl = http_utils_1.HttpUtils.getWsUrl();
    }
    CuentasService.prototype.obtenerCuentas = function (encryptedSecuencia) {
        var _this = this;
        var url = this.baseUrl + "/GET_CC";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        console.log(formData);
        return this.http.post(url, formData, { headers: headers, responseType: "json" })
            .map(function (res) {
            console.log("obtenerCuentas", JSON.stringify(res));
            var cuentas = _this.transformaCuentas(res);
            return cuentas;
        });
    };
    CuentasService.prototype.transformaCuentas = function (res) {
        var _this = this;
        var cuentas = [];
        var arr = res["NewDataSet"]["Table"];
        if (Array.isArray(arr)) {
            // La respuesta es un array (Varias cuentas).
            arr.forEach(function (objeto) {
                cuentas.push(_this.creaCuenta(objeto));
            });
        }
        else {
            // La respuesta es un objeto (una sola cuenta).
            cuentas.push(this.creaCuenta(arr));
        }
        return cuentas;
    };
    CuentasService.prototype.creaCuenta = function (objeto) {
        var cuenta = new cuentas_iterface_1.Cuenta();
        cuenta.numTarjeta = objeto["NUM_TARJETA"];
        cuenta.numCuenta = objeto["NUM_CUENTA"];
        cuenta.titular = objeto["TITULAR"];
        cuenta.status = objeto["ESTADO_CTA"];
        cuenta.moneda = objeto["VMONEDA"];
        cuenta.saldoActual = objeto["SALDO_ACTUAL"];
        cuenta.pseudonimo = objeto["PSEUDONIMO"];
        cuenta.saldoTotal = objeto["SAL_TOTAL_CTA"];
        return cuenta;
    };
    CuentasService.prototype.obtenerMovtosCuenta = function (encryptedSecuencia, encryptedCuenta, min, max) {
        var _this = this;
        var url = this.baseUrl + "/GET_CC_MOV";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        formData.append('PNUM_CUENTA', encryptedCuenta);
        formData.append('PCANT_MIN', min.toString());
        formData.append('PCANT_MAX', max.toString());
        console.log(url, "\n", encryptedSecuencia, encryptedCuenta, min, max);
        return this.http.post(url, formData, { headers: headers, responseType: "json" })
            .map(function (res) {
            console.log("obtenerMovtosCuenta", JSON.stringify(res));
            var wsData = _this.transformMovtosCuenta(res);
            return wsData;
        });
    };
    CuentasService.prototype.transformMovtosCuenta = function (res) {
        var _this = this;
        var wsData = new WsData();
        var movtos = [];
        if (res["NewDataSet"] != null) {
            var obj = res["NewDataSet"]["Table"];
            if (Array.isArray(obj)) {
                // La respuesta es un array (Varios movimientos).
                obj.forEach(function (element) {
                    movtos.push(_this.creaMovto(element));
                });
            }
            else {
                // La respuesta es un objeto (puede ser un movto o un mensaje, hazme el favor!!!??).
                if (obj["PRESP_COD"]) {
                    // Es un mensaje
                    wsData.mensaje = this.creaRespuesta(obj);
                }
                else {
                    // Es un solo movto.
                    movtos.push(this.creaMovto(obj));
                }
            }
        }
        wsData.movimientos = movtos;
        return wsData;
    };
    CuentasService.prototype.creaMovto = function (objeto) {
        var movto = new cuenta_movtos_interface_1.MovtoCuenta();
        movto.fecha = objeto["FEC_MOVIMIENTO"];
        movto.descripcion = objeto["DESCRIPCION"];
        movto.monto = objeto["MON_MOVIMIENTO"];
        movto.saldo = objeto["VSALDO"];
        return movto;
    };
    CuentasService.prototype.creaRespuesta = function (objeto) {
        var respuesta = new respuesta_interface_1.WsRespuesta();
        respuesta.codigo = objeto["PRESP_COD"];
        respuesta.mensaje = objeto["PMENSAJE"];
        return respuesta;
    };
    CuentasService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], CuentasService);
    return CuentasService;
}());
exports.CuentasService = CuentasService;
//# sourceMappingURL=data:application/json;base64,