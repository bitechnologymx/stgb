"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
require("rxjs/add/operator/map");
var http_utils_1 = require("../shared/utils/http-utils");
var tarjetas_interface_1 = require("../services/interfaces/tarjetas.interface");
var tarjeta_movtos_interface_1 = require("./interfaces/tarjeta-movtos.interface");
var TarjetasService = /** @class */ (function () {
    function TarjetasService(http) {
        this.http = http;
        this.baseUrl = http_utils_1.HttpUtils.getWsUrl();
    }
    TarjetasService.prototype.obtenerTarjetas = function (encryptedSecuencia) {
        var _this = this;
        var url = this.baseUrl + "/GET_TC";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        //console.log(url, "-", formData);
        return this.http.post(url, formData, { headers: headers, responseType: "json" })
            .map(function (res) {
            //console.log("obtenerTarjetas", JSON.stringify(res));
            var tarjetas = _this.transformaTarjetas(res);
            return tarjetas;
        });
    };
    TarjetasService.prototype.transformaTarjetas = function (res) {
        var _this = this;
        var tarjetas = [];
        var arr = res["NewDataSet"]["Table"];
        if (Array.isArray(arr)) {
            // La respuesta es un array (Varias tarjetas).
            arr.forEach(function (objeto) {
                tarjetas.push(_this.creaTarjeta(objeto));
            });
        }
        else {
            // La respuesta es un objeto (una sola tarjeta).
            tarjetas.push(this.creaTarjeta(arr));
        }
        return tarjetas;
    };
    TarjetasService.prototype.creaTarjeta = function (objeto) {
        var tarjeta = new tarjetas_interface_1.Tarjeta();
        tarjeta.numTarjeta = objeto["NUM_TARJETA"];
        tarjeta.pseudonimo = objeto["PSEUDONIMO"];
        tarjeta.producto = objeto["PRODUCTO"];
        tarjeta.saldo = objeto["SALDO"];
        tarjeta.disponible = objeto["DISPONIBLE"];
        tarjeta.tipoTC = objeto["TIPO_TC"];
        tarjeta.numCuenta = objeto["NUM_CTA_CREDITO"];
        //console.log(tarjeta.numTarjeta); 
        return tarjeta;
    };
    TarjetasService.prototype.obtenerMovtosTarjeta = function (encryptedSecuencia, encryptedNumCta, numTarjeta, tipoMovtos) {
        var _this = this;
        var servicio = (tipoMovtos == "Corrientes") ? "GET_TC_MOV" : (tipoMovtos == "Flotantes") ? "GET_TC_HOLD" : "GET_TC_HEADER";
        var url = this.baseUrl + "/" + servicio;
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        formData.append('PNUM_CTA_CREDITO', encryptedNumCta);
        //formData.append((tipoMovtos=="Flotantes")?'PTARJETA':'PNUM_TC', numTarjeta);
        formData.append('PNUM_TC', numTarjeta);
        console.log(url + "\n" + encryptedSecuencia, encryptedNumCta, numTarjeta);
        return this.http.post(url, formData, { headers: headers, responseType: "json" })
            .map(function (res) {
            console.log("obtenerMovtosTarjeta", JSON.stringify(res));
            var movtos;
            if (tipoMovtos == "Corrientes") {
                movtos = _this.transformaMovtosCorrientes(res);
            }
            else if (tipoMovtos == "Flotantes") {
                movtos = _this.transformaMovtosFlotantes(res);
            }
            else {
                movtos = _this.transformaMovtosResumen(res);
            }
            return movtos;
        });
    };
    TarjetasService.prototype.transformaMovtosCorrientes = function (res) {
        var _this = this;
        var movtos = [];
        if (res["NewDataSet"] != null) {
            var obj = res["NewDataSet"]["Table"];
            if (Array.isArray(obj)) {
                obj.forEach(function (element) {
                    movtos.push(_this.creaMovtoCorriente(element));
                });
            }
            else {
                movtos.push(this.creaMovtoCorriente(obj));
            }
        }
        return movtos;
    };
    TarjetasService.prototype.creaMovtoCorriente = function (objeto) {
        var movto = new tarjeta_movtos_interface_1.MovtoCorriente();
        movto.fechaMov = objeto["XFEC_COMPRA"];
        movto.fechaPosteo = objeto["XFEC_POSTEO"];
        movto.descripcion = objeto["XDESC_MOV"];
        movto.monto = objeto["XMON_MOV"];
        movto.referencia = objeto["XREF_INTER"];
        movto.tc = objeto["XTC"];
        return movto;
    };
    TarjetasService.prototype.transformaMovtosFlotantes = function (res) {
        var _this = this;
        var movtos = [];
        if (res["NewDataSet"] != null) {
            var obj = res["NewDataSet"]["Table"];
            if (Array.isArray(obj)) {
                obj.forEach(function (element) {
                    movtos.push(_this.creaMovtoFlotante(element));
                });
            }
            else {
                movtos.push(this.creaMovtoFlotante(obj));
            }
        }
        return movtos;
    };
    TarjetasService.prototype.creaMovtoFlotante = function (objeto) {
        var movto = new tarjeta_movtos_interface_1.MovtoFlotante();
        movto.fechaMov = objeto["FECHA"];
        movto.descripcion = objeto["DESCRIPCION"];
        movto.monto = objeto["MONTO"];
        movto.tc = objeto["TARJETA"];
        return movto;
    };
    TarjetasService.prototype.transformaMovtosResumen = function (res) {
        var movtos = [];
        // En este caso, se espera un objeto.
        var objeto = res["NewDataSet"]["Table"];
        var movto = new tarjeta_movtos_interface_1.MovtoResumen();
        movto.nombre = objeto["NOMBRE"];
        movto.fechaCorte = objeto["FECHA_CORTE"];
        movto.numCuenta = objeto["NUM_CUENTA"];
        movto.fechaPagoContado = objeto["FECHA_PAGO_CONTADO"];
        movto.pagoContado = objeto["PAGO_CONTADO"];
        movto.status = objeto["ESTADO"];
        movto.fechaPagoMinimo = objeto["FECHA_PAGO_MINIMO"];
        movto.tipoTarjeta = objeto["TIPO_TARJETA"];
        movto.balanceAnterior = objeto["BALANCE_ANTERIOR"];
        movto.fechaVencimiento = objeto["FECHA_VENCIMIENTO"];
        movto.comprasRetiros = objeto["CONSUMOS_COMP_RET"];
        movto.cargosVarios = objeto["CARGOS_VARIOS"];
        movto.cargosFinancieros = objeto["CARGOS_X_FINAN"];
        movto.limiteCredito = objeto["LIMITE_CREDITO"];
        movto.pagosCreditos = objeto["PAGOS_CREDITOS"];
        movto.saldoActual = objeto["SALDO_ACTUAL"];
        movto.saldoAlCorte = objeto["SALDO_CORTE"];
        movto.flotes = objeto["FLOTES"];
        movto.pagoMinimo = objeto["PAGO_MINIMO"];
        movto.creditoDisponible = objeto["CREDITO_DISPONIBLE"];
        movto.puntosPromerica = objeto["PUNTOS_PROMERICA"];
        movto.sobregiro = objeto["SOBREGIRO"];
        movto.financiamiento = objeto["FINANCIAMIENTO"];
        movto.numTjtasAdicionales = objeto["NUM_TARJETAS_ADICIONALES"];
        movtos.push(movto);
        //console.log("FechaPagoConatdo:",objeto["FECHA_PAGO_CONTADO"]);
        return movtos;
    };
    TarjetasService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], TarjetasService);
    return TarjetasService;
}());
exports.TarjetasService = TarjetasService;
//# sourceMappingURL=data:application/json;base64,