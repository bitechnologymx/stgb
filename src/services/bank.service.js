"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/common/http");
require("rxjs/add/operator/map");
var http_utils_1 = require("../shared/utils/http-utils");
var BankService = /** @class */ (function () {
    function BankService(httpClient) {
        this.httpClient = httpClient;
        // private baseUrl:string = "http://10.0.2.2:3000";
        // private baseUrl:string = "http://216.250.114.107:8080/StGeorgesBankServices";
        this.baseUrl = http_utils_1.HttpUtils.getWsUrl();
    }
    BankService.prototype.logoutUser = function (encrypteSec, ipAddr, razonSalida) {
        var url = this.baseUrl + "/LOGOUT_USER";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encrypteSec);
        formData.append('PIP_ADD', ipAddr);
        formData.append('RAZON_SALIDA', razonSalida);
        //console.log("logoutUser:",url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.cambiarPassword = function (encryptedUsrPwdSec, indCambio, vigencia, hash) {
        var url = this.baseUrl + "/RESET_PASSWORD";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PUSER_PPASSNEW_PSECUENCIA', encryptedUsrPwdSec);
        formData.append('PIND_CAMBIO', indCambio);
        formData.append('PCADUCIDAD', vigencia);
        formData.append('PHASH', hash);
        console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerPwdVigencia = function () {
        var url = this.baseUrl + "/GET_DURACION_CLAVE";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        //console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.validarToken = function (secuencia, token, clienteEncriptado, ipDisp) {
        var url = this.baseUrl + "/VALIDATE_TOKEN";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', secuencia);
        formData.append('PTOKEN', token);
        formData.append('PUSER', clienteEncriptado);
        formData.append('PIP_ADD', ipDisp);
        //console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    // Se cre� nuevo servicio independiente 22/08/2018.
    // Cuando se cambie todo a ese nuevo servicio (mensaje.service.ts), se debe eliminar este m�todo.
    BankService.prototype.obtenerMensaje = function (codigo) {
        var url = this.baseUrl + "/GET_MENSAJE";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PRESP_COD', codigo);
        //console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerTipoCliente = function (encryptedUsrName) {
        var url = this.baseUrl + "/GET_TIPO_CLIENTE";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PUSER', encryptedUsrName);
        //console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerUsrImage = function (encryptedUsrName, modulus, exponent) {
        var url = this.baseUrl + "/GET_USER_IMAGE";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PUSER', encryptedUsrName);
        formData.append('PMODULUS', modulus);
        formData.append('PEXPONENT', exponent);
        console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerUsrImagen = function (encryptedUsrName, encryptedKeyAES) {
        var url = this.baseUrl + "/GET_USER_IMAGEN";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PUSER', encryptedUsrName);
        formData.append('PENVIO', encryptedKeyAES);
        console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.genPemPrivateKey = function (xmlPrivateKey) {
        var url = this.baseUrl + "/GEN_KEYS";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PK', xmlPrivateKey);
        console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.validarUsrLogin = function (encryptedNaP, ipDisp, dataDisp) {
        var url = this.baseUrl + "/VALIDATE_USER_PWD_LOGIN";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PUSER_PPAS', encryptedNaP);
        formData.append('PIP_ADD', ipDisp);
        formData.append('PDATA_DISPOSITIVO', dataDisp);
        console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerUltimoAcceso = function (encryptedSecuencia) {
        var url = this.baseUrl + "/GET_USER_INTRO_DATA";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        //console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerTiposDeCuentas = function (encryptedSecuencia) {
        var url = this.baseUrl + "/GET_TIPO_CUENTAS";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        //console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    // Ok Kinvey
    BankService.prototype.obtenerSucursales = function () {
        var url = this.baseUrl + "/GET_SUCURSALES";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        console.log(url);
        return this.httpClient.post(url, "", { headers: headers, responseType: "json" });
    };
    BankService.prototype.obtenerSucursalesSecuencia = function (encryptedSecuencia) {
        var url = this.baseUrl + "/GET_SUCURSALES";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        console.log(url);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" });
    };
    BankService.prototype.revisaBLStatus = function (encryptedSecuencia) {
        var url = this.baseUrl + "/GET_BL_STATUS";
        var headers = http_utils_1.HttpUtils.createRequestHeaderPost();
        var formData = new FormData();
        formData.append('PSECUENCIA', encryptedSecuencia);
        console.log(url, "-", formData);
        return this.httpClient.post(url, formData, { headers: headers, responseType: "json" })
            .map(function (res) {
            console.log("revisaBLStatus", JSON.stringify(res));
            var status = res["NewDataSet"]["Table"]["PESTADO"];
            return status;
        });
    };
    BankService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.HttpClient])
    ], BankService);
    return BankService;
}());
exports.BankService = BankService;
//# sourceMappingURL=data:application/json;base64,