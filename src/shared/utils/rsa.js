"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rs = require("jsrsasign");
var RSAUtils = /** @class */ (function () {
    function RSAUtils() {
    }
    RSAUtils.prototype.encriptaRSA = function (clearText, publicRSAKey /*: RSAKey*/) {
        var encript = rs.KJUR.crypto.Cipher.encrypt(clearText, publicRSAKey, "RSA");
        return rs.hextob64(encript); // no padding
    };
    RSAUtils.prototype.desencriptaRSA = function (value, privateKey) {
        var decrypted = null;
        try {
            decrypted = privateKey.decrypt(value).toString();
        }
        catch (err) {
            console.log(err);
            return this.desencriptaRSAOld(value, privateKey.exportPemKey());
        }
        console.log("desencriptaRSA : " + value + " - " + decrypted);
        return decrypted;
    };
    RSAUtils.prototype.desencriptaRSAOld = function (encryptedDataB64, privateRSAKey) {
        console.log("\ndesencriptaRSA - encryptedData:", encryptedDataB64);
        var encryptedDataHex = rs.b64tohex(encryptedDataB64);
        if (encryptedDataHex == null) {
            console.log("ES NULLLLL");
        }
        var decryptedDataHex = null;
        console.log("---------------------------------------------");
        console.log("desencriptaRSA - decryptedDataHex", decryptedDataHex);
        var i = 0;
        while (decryptedDataHex == null) {
            if (i == 0) {
                encryptedDataHex = rs.b64nltohex(encryptedDataB64);
            }
            if (i == 1) {
                encryptedDataHex = rs.b64utohex(encryptedDataB64);
            }
            if (i == 2) {
                encryptedDataHex = rs.b64tohex(encryptedDataB64);
                i = -1;
            }
            decryptedDataHex = rs.KJUR.crypto.Cipher.decrypt(encryptedDataHex, privateRSAKey, "RSA");
            console.log("desencriptaRSA - decryptedDataHex " + i + " : ", decryptedDataHex);
            if (decryptedDataHex == null && i == -1) {
                return null;
            }
            i = i + 1;
        }
        return decryptedDataHex;
    };
    /**desencriptaRSA(encryptedDataB64, privateRSAKey) {
          console.log("\ndesencriptaRSA - encryptedData:",encryptedDataB64);
          //console.log("privateRSAKey_B64", this.privateKeyToBase64(privateRSAKey));
  
          encryptedDataB64 = encryptedDataB64.trim();
          let privKeyB64 = this.privateKeyToBase64(privateRSAKey);
          let privateKey = this.base64ToPrivateKey(privKeyB64);
          let encryptedDataHex = rs.b64nltohex(encryptedDataB64);
          if (encryptedDataHex == null) {console.log("ES NULLLLL")}
          let decryptedDataHex = null;
          console.log("---------------------------------------------");
          console.log("desencriptaRSA - decryptedDataHex", decryptedDataHex);
  
          let i=0;
  
          while(decryptedDataHex==null){
  
            if (i==0){ encryptedDataHex = rs.b64tohex(encryptedDataB64); }
            if (i==1){ encryptedDataHex = rs.b64utohex(encryptedDataB64); }
            if (i==2){ encryptedDataHex = rs.b64tohex(encryptedDataB64); i=-1; }
  
            decryptedDataHex = rs.KJUR.crypto.Cipher.decrypt(encryptedDataHex, privateKey, "RSA");
            console.log("desencriptaRSA - decryptedDataHex " + i + " : ", decryptedDataHex);
  
            if (decryptedDataHex == null && i==-1){
              return null;
            }
  
            i = i +1;
          }
  
          return decryptedDataHex;
      }*/
    RSAUtils.prototype.generaRSAKey = function () {
        // Genere la llave pública y privada del dispositivo
        return rs.KEYUTIL.generateKeypair("RSA", 2048);
    };
    RSAUtils.prototype.extraePublicKey = function (rsaKeyPair) {
        return rsaKeyPair.pubKeyObj;
    };
    RSAUtils.prototype.extraePrivateKey = function (rsaKeyPair) {
        return rsaKeyPair.prvKeyObj;
    };
    RSAUtils.prototype.pemToKey = function (pemKey) {
        return rs.KEYUTIL.getKey(pemKey);
    };
    RSAUtils.generaPubKeyFromModulus = function (modulus, exponent) {
        // Not implemented
    };
    //static descomponePubKey(keyPairRSA) {
    RSAUtils.prototype.descomponePubKey = function (publicRSAKey) {
        // Descompone una llave pública (RSA Puro) en sus partes:
        // Modulus y Exponent.
        // Regresa un JSON con ambas partes codificado en Base64.
        // let pubKeyRSA = keyPairRSA.pubKeyObj;
        return this.getExponentAndModulusFromPubKey(publicRSAKey);
    };
    RSAUtils.prototype.getExponentAndModulusFromPubKey = function (pubKeyRSA) {
        var exponent = new rs.BigInteger(pubKeyRSA.e.toString());
        var exponentBA = exponent.toByteArray();
        var exponentHex = RSAUtils.toHexString(exponentBA);
        var exponentB64 = rs.hextob64(exponentHex); // DO Match with Java
        // ---
        var modulus = pubKeyRSA.n;
        var modulusBA = modulus.toByteArray();
        var moduluxHex = RSAUtils.toHexString(modulusBA); //rs.BAtohex(modulusBA);
        var modulusB64 = rs.hextob64(moduluxHex); // DO NOT Match with Java, convert from bytes, not from string representation *******
        return {
            "exponent": exponent.toString(),
            "exponentBA": exponentBA,
            "exponentB64": exponentB64,
            "exponentHex": exponentHex,
            "modulus": modulus.toString(),
            "modulusBA": modulusBA,
            "modulusB64": modulusB64,
            "modulusHex": moduluxHex
        };
    };
    RSAUtils.prototype.publicKeyToBase64 = function (publicRSAKey) {
        var pubKeyPEM = rs.KEYUTIL.getPEM(publicRSAKey);
        var pubKeyHex = rs.pemtohex(pubKeyPEM, "PUBLIC KEY");
        return rs.hextob64(pubKeyHex);
    };
    RSAUtils.prototype.privateKeyToBase64 = function (privateRSAKey) {
        var prvKeyPEM = rs.KEYUTIL.getPEM(privateRSAKey, "PKCS1PRV");
        var prvKeyHex = rs.pemtohex(prvKeyPEM, "RSA PRIVATE KEY");
        return rs.hex2b64(prvKeyHex);
    };
    RSAUtils.prototype.base64ToPublicKey = function (base64PubKey) {
        var pubKeyPEM = rs.hextopem(rs.b64tohex(base64PubKey), 'PUBLIC KEY');
        return rs.KEYUTIL.getKey(pubKeyPEM); // RSAKey
    };
    RSAUtils.prototype.base64ToPrivateKey = function (base64PrivKey) {
        var pubKeyPEM = rs.hextopem(rs.b64tohex(base64PrivKey), 'RSA PRIVATE KEY');
        return rs.KEYUTIL.getKey(pubKeyPEM); // RSAKey
    };
    RSAUtils.toHexString = function (byteArray) {
        return Array.prototype.map.call(byteArray, function (byte) {
            return ('0' + (byte & 0xFF).toString(16)).slice(-2);
        }).join('');
    };
    RSAUtils.toByteArray = function (hexString) {
        var result = [];
        while (hexString.length >= 2) {
            result.push(parseInt(hexString.substring(0, 2), 16));
            hexString = hexString.substring(2, hexString.length);
        }
        return result;
    };
    return RSAUtils;
}());
exports.RSAUtils = RSAUtils;
//# sourceMappingURL=data:application/json;base64,